*vim-flexagon* Easy access to a variety of expression folds

================================================================================
CONTENTS                            *FlexagonContents*

    1. Introduction.................|FlexagonIntro|
    2. Commands.....................|FlexagonCommands|
    3. Folds........................|FlexagonFolds|
    4. Settings.....................|FlexagonSettings|
    5. Mappings.....................|FlexagonMapppins|

================================================================================
1. INTRODUCTION                                *FlexagonIntro*

Folding is a dark corner of vim, but potentially quite powerful. It's a
tool to hide "unimportant" text, but that skirts the question, "what is
unimportant". This plugin attempts to ease unlocking this power.

This plugin is (mostly) a wrapper around |foldexpr| allowing you to
easily specify a high level "hiding strategy". It exposes one command
*Fold:* which takes a folding argument. The options are exposed via tab
complete.


================================================================================
2. COMMANDS                                *FlexagonCommands*

                                           *:Fold*
:Fold [foldtype]      Choose a fold type with tab auto-complete

================================================================================
3. FOLDS                                   *FlexagonFolds*

wiki        Look for Mediawiki style headers ( = HEADER ) embedded in
            comments. Up to 4 levels are recognized.

markdown    Similar to wiki header, but with markdown hash style
            headers ( # HEADER ). This also recognizes standard header
            levels. This can be applied against standard markdown and
            will work where hash comment markers are valid.

bar         comment with long string of =, -, or _
            single level fold

doxygen     Doxygen/javadoc style "doubled up" comments, "/**" for c,
            '//' for php/cpp. This is a single layer fold (although it
            makes some sense to extend the metaphor)

header      Look for flowerpot style headers. One level of fold.
            Recognizes "bars" of various sorts and attempts to a
            relevant comment to fold on.

space       Use blank lines as section/fold separators
            As a first order fold this works very well on a wide variety
            of files

comment     fold non-commented code. This is useful approximation of
            Donald Knuth's "Literate" code. 

code        fold comments

braces      Use { and } as markers. For most C inspired code this is an
            easy first level fold

ini         Fold on INI style headers

html        Fold on H tags

manual      Reset to vim manual folding

indent      Reset to vim indent folding


================================================================================
4. SETTINGS                                *FlexagonSettings*

                                           *flexagon_disable_foldtext*
Flexagon has it's own foldtext formatting. It's enabled by default. It
shouldn't be too annoying and features a simple but useful search for
"relevant" fold text that compliments the included folds.

To disabled it:

let g:flexagon_disable_foldtext = 1

Please note, the folding function tries to skip "empty" text in an
effort to make the fold text more useful.

If you like the tab complete Fold, but need a fold not supplied,
Flexagon allows you to register your own fold.

:call flexgon#userfold#register('fold_alias', 'FunctionName')

================================================================================
4. MAPPINGS                                *FlexagonFolds*

Flexagon provides a utility "bubble" function to walk up and down top
lecel folds. By default there are mappings for ZJ and ZJ mirroring vim's
native zj and zk mappings. These two mapping are meant to walk through
folded code, expanding the next or last fold and closing the prior fold
The mappings use <unique> to avoid stepping on personal mappings.
There's no current vim mapping for those mappings. There are two <Plug>
mappings

<Plug>BubbleDown
<Plug>BubbleUp
